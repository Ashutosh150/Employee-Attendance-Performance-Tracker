file-structure :

employee_tracker/
├── app/
│   ├── __init__.py
│   ├── employee_manager.py        # OOP logic
│   ├── storage.json               # JSON data
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── auth_utils.py          # PIN login
│   │   ├── file_utils.py          # backups
│   │   └── report_utils.py        # PDF/email
├── logs/
│   └── tracker.log                # logs saved here
├── .env                           # for PIN & email creds
├── requirements.txt
├── Dockerfile
├── docker-compose.yml            # optional later
├── .gitignore
├── run.py                        # to launch from Docker
└── frontend_app.py               # Streamlit UI

Flow -->

🗂 STEP 1: Basic Backend (Python OOP)
Start with employee_manager.py to support:

Add employee

View all

Mark attendance (with timestamp)

Record performance comment

Save/load to storage.json

Example starter class layout:

python
Copy
Edit
# app/employee_manager.py
[
    {
        import json
    from datetime import datetime

    class EmployeeManager:
        def __init__(self, storage_file):
            self.storage_file = storage_file
            self.employees = self.load_data()

        def load_data(self):
            try:
                with open(self.storage_file, 'r') as f:
                    return json.load(f)
            except FileNotFoundError:
                return {}

        def save_data(self):
            with open(self.storage_file, 'w') as f:
                json.dump(self.employees, f, indent=4)

        def add_employee(self, emp_id, name, department):
            if emp_id in self.employees:
                return False
            self.employees[emp_id] = {
                "name": name,
                "department": department,
                "attendance": [],
                "performance": []
            }
            self.save_data()
            return True

        def mark_attendance(self, emp_id):
            if emp_id in self.employees:
                self.employees[emp_id]["attendance"].append(str(datetime.now()))
                self.save_data()
                return True
            return False

        def add_performance(self, emp_id, comment):
            if emp_id in self.employees:
                self.employees[emp_id]["performance"].append({
                    "comment": comment,
                    "date": str(datetime.now())
                })
                self.save_data()
                return True
            return False

        def get_all_employees(self):
            return self.employees}

]        
🗂 STEP 2: Frontend (Streamlit)
Login screen (PIN check)

Form to add employee

Buttons to mark attendance / performance

View employee data

We’ll plug it into frontend_app.py once your backend is working.

🗂 STEP 3: Utilities
auth_utils.py: PIN-based login using os.getenv() from .env

file_utils.py: Backup data daily

report_utils.py: Email PDF weekly summary (can come later)

🐳 STEP 4: Dockerize (after testing locally)
requirements.txt

Dockerfile

(Optional) docker-compose.yml

🔁 Workflow You’ll Follow
Build OOP logic

Add Streamlit frontend

Add PIN-based auth

Add weekly PDF/email

Add logging

Dockerize app

Optionally deploy with Docker Compose

--------------------------------------------
#to build file structure using linux/cmd -->

mkdir employee_tracker
cd employee_tracker

# Create subfolders
mkdir app
mkdir app/utils
mkdir logs

# Create empty starter files
touch app/__init__.py
touch app/employee_manager.py
touch app/storage.json
touch app/utils/__init__.py
touch app/utils/auth_utils.py
touch app/utils/file_utils.py
touch app/utils/report_utils.py
touch logs/tracker.log
touch .env
touch requirements.txt
touch Dockerfile
touch .gitignore
touch run.py
touch frontend_app.py

--------------------------------------------
# .gitignore -->
__pycache__/ → ignores the whole folder where Python stores compiled files

*.pyc → ignores compiled bytecode files directly

.env → hides your secrets (PIN, email passwords)

logs/ → hides logs like tracker.log

--------------------------------------------


# 📊 Employee Tracker - FastAPI + Streamlit + Docker

> A real-world Employee Management System built with **Python**, **FastAPI**, **Streamlit**, and **Docker**, supporting attendance, performance tracking, and secure PIN-based access.

---

## 📁 Folder Structure Overview

```
employee-tracker/
├── app/
│   ├── models/
│   │   └── employee.py
│   ├── manager.py
│   ├── auth.py
│   └── storage.json
├── api/
│   └── main.py         # FastAPI backend
├── streamlit_app.py    # Streamlit frontend
├── run.py              # Optional CLI runner
├── .env                # Contains APP_PIN (Do NOT push)
├── Dockerfile
├── docker-compose.yml
├── requirements.txt
└── README.md
```

---

## ✅ Features Implemented

* Add, View, Update, and Delete Employees
* Attendance and Performance Review per employee
* Persistent JSON-based storage
* PIN-based Authentication using `getpass` and `.env`
* REST API powered by FastAPI
* Frontend using Streamlit
* Fully Dockerized via `docker-compose`

---

## 🔐 .env Configuration

Create a `.env` file in the root:

```
APP_PIN=1234
```

> This is used for PIN authentication in both CLI and FastAPI headers.

---

## 🚀 Setup & Run Instructions

### 1. Clone the Repository

```bash
git clone https://github.com/your-username/employee-tracker.git
cd employee-tracker
```

### 2. Install Dependencies (for local run)

```bash
pip install -r requirements.txt
```

### 3. Run FastAPI Backend

```bash
uvicorn api.main:app --reload
```

### 4. Run Streamlit Frontend

```bash
streamlit run streamlit_app.py
```

Access frontend at: [http://localhost:8501](http://localhost:8501)

---

## 🐳 Docker Setup

### 1. Build Docker Image

```bash
docker-compose build
```

### 2. Run Entire App

```bash
docker-compose up
```

### 3. Access

* Streamlit: [http://localhost:8501](http://localhost:8501)
* FastAPI Docs: [http://localhost:8000/docs](http://localhost:8000/docs)

---

## 🔗 FastAPI Endpoints (Sample)

* `POST /add` - Add Employee
* `GET /employees` - Get all Employees
* `GET /employee/{emp_id}` - Fetch by ID
* `PUT /employee/{emp_id}` - Update Employee
* `POST /attendance` - Mark Attendance
* `POST /performance` - Add Performance Review

> All endpoints require `x-pin` header for authentication.

Example using curl:

```bash
curl -X GET http://localhost:8000/employees -H "x-pin: 1234"
```

---

## 🧪 Testing Locally

* You can test FastAPI endpoints using [http://localhost:8000/docs](http://localhost:8000/docs)
* You can test Streamlit locally by entering PIN and using UI

---

## 📌 Notes

* **PIN is handled securely** via environment variables, not hardcoded
* **JSON** is used for lightweight persistent storage
* **getpass** is used to avoid echoing PIN in terminal
* FastAPI uses **dependency injection** for PIN validation in routes
* Docker uses **internal networking** via service names in `docker-compose.yml`

---

## 📄 Future Enhancements

* Email weekly performance reports
* Export PDF summaries
* JWT-based auth
* CI/CD and live deployment (Render / Railway)

---

## 🙌 Credits

Built by \[Your Name] for hands-on learning and practical backend/frontend development using Python ecosystem tools.

---

## 🧠 Skills Practiced

* Python OOP and File Handling
* FastAPI and REST principles
* Streamlit frontend with stateful interactivity
* Docker fundamentals and networking
* Secure coding practices (PIN-based auth)

---

## 📬 Contact

Feel free to connect for questions or improvements!
